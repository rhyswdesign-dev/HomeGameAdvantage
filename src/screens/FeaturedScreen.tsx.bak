import React, { useLayoutEffect, useRef } from 'react';
import {
  ScrollView, View, Text, Image, TouchableOpacity, Pressable, StyleSheet, Share, Alert
} from 'react-native';
import { useNavigation, useFocusEffect } from '@react-navigation/native';
import { Ionicons } from '@expo/vector-icons';
import { colors, spacing, radii, fonts, standardText, buttons } from '../theme/tokens';
import PillButton from '../components/PillButton';
import type { NativeStackNavigationProp } from '@react-navigation/native-stack';
import type { RootStackParamList } from '../navigation/RootNavigator';
import { getBrandsByTier, getRandomizedBrandsByCategory } from '../data/brands';
import { getBar } from '../data/bars';
import { useSavedItems } from '../hooks/useSavedItems';
import GlobalActions from '../components/GlobalActions';
import { SearchableItem } from '../services/searchService';

const chips: Array<{ key: string; label: string }> = [
  { key: 'Home', label: 'Home' },
  { key: 'Spirits', label: 'Spirits' },
  { key: 'NonAlcoholic', label: 'Non-Alcoholic' },
  { key: 'Bars',    label: 'Bars'    },
  { key: 'Events',  label: 'Events'  },
  { key: 'Games',   label: 'Games'   },
  { key: 'Vault',   label: 'Vault'   },
];

// Get gold tier spirits from all categories (same as Spirits page logic)
const goldSpirits = [
  ...getRandomizedBrandsByCategory('Whiskey').filter(brand => brand.tier === 'gold'),
  ...getRandomizedBrandsByCategory('Gin').filter(brand => brand.tier === 'gold'),
  ...getRandomizedBrandsByCategory('Vodka').filter(brand => brand.tier === 'gold'),
  ...getRandomizedBrandsByCategory('Tequila').filter(brand => brand.tier === 'gold'),
  ...getRandomizedBrandsByCategory('Rum').filter(brand => brand.tier === 'gold')
].map(brand => ({
  id: brand.id,  // Add brand ID for navigation
  title: brand.name,
  subtitle: brand.hero?.tagline || `${brand.quickInfo?.style || ''} • ${brand.quickInfo?.origin || ''}`,
  img: brand.hero?.image || 'https://images.unsplash.com/photo-1569529465841-dfecdab7503b?auto=format&fit=crop&w=1200&q=60',
  tier: brand.tier  // Add tier for navigation
}));

// Hardcode only gold tier bars (Untitled Champagne Lounge is currently the only gold tier bar)
const goldBars = [
  {
    id: 'untitled-champagne-lounge',
    title: 'Untitled Champagne Lounge',
    subtitle: 'Premium Champagne & Elegant Atmosphere',
    img: 'https://images.unsplash.com/photo-1470337458703-46ad1756a187?auto=format&fit=crop&w=1200&q=60'
  }
];

const games = [
  { id: 'kings-cup', title:"King's Cup", difficulty:'Easy',
    img:'https://images.unsplash.com/photo-1606092195730-5d7b9af1efc5?auto=format&fit=crop&w=880&q=60' },
  { id: 'mixmaster-challenge', title:'MixMaster Challenge', difficulty:'Medium',
    img:'https://images.unsplash.com/photo-1618221118493-9cfa1a0f3f4e?auto=format&fit=crop&w=880&q=60' },
  { id: 'speedy-sips', title:'Speedy Sips', difficulty:'Easy',
    img:'https://images.unsplash.com/photo-1582719478250-c89cae4dc84a?auto=format&fit=crop&w=880&q=60' },
];

const featuredCocktails = [
  {
    id: 'old-fashioned',
    title: 'Old Fashioned',
    subtitle: 'Classic • Whiskey-based',
    description: 'A timeless cocktail made with whiskey, sugar, bitters, and an orange twist.',
    img: 'https://images.unsplash.com/photo-1536935338788-846bb9981813?auto=format&fit=crop&w=1200&q=60',
    difficulty: 'Easy',
    time: '3 min',
    ingredients: ['2 oz Whiskey', '1/4 oz Simple Syrup', '2 dashes Angostura Bitters', 'Orange Peel']
  },
  {
    id: 'manhattan',
    title: 'Manhattan',
    subtitle: 'Classic • Whiskey-based',
    description: 'An elegant mix of whiskey, sweet vermouth, and bitters, garnished with a cherry.',
    img: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?auto=format&fit=crop&w=1200&q=60',
    difficulty: 'Easy',
    time: '2 min',
    ingredients: ['2 oz Rye Whiskey', '1 oz Sweet Vermouth', '2 dashes Angostura Bitters', 'Maraschino Cherry']
  },
  {
    id: 'negroni',
    title: 'Negroni',
    subtitle: 'Classic • Gin-based',
    description: 'A bitter and sweet Italian cocktail with gin, Campari, and sweet vermouth.',
    img: 'https://images.unsplash.com/photo-1541745537411-b8046dc6d66c?auto=format&fit=crop&w=1200&q=60',
    difficulty: 'Easy',
    time: '2 min',
    ingredients: ['1 oz Gin', '1 oz Campari', '1 oz Sweet Vermouth', 'Orange Peel']
  },
  {
    id: 'espresso-martini',
    title: 'Espresso Martini',
    subtitle: 'Modern • Vodka-based',
    description: 'A sophisticated coffee cocktail with vodka, coffee liqueur, and fresh espresso.',
    img: 'https://images.unsplash.com/photo-1609951651556-5334e2706168?auto=format&fit=crop&w=1200&q=60',
    difficulty: 'Medium',
    time: '5 min',
    ingredients: ['2 oz Vodka', '1/2 oz Coffee Liqueur', '1 shot Fresh Espresso', '1/4 oz Simple Syrup']
  }
];

const videos = [
  { id: 'perfect-pour-techniques', title:'Perfect Pour Techniques', duration:'Watch Now · 2 min',
    img:'https://images.unsplash.com/photo-1514362546898-4c5b9f0b1a2d?auto=format&fit=crop&w=1200&q=60' },
  { id: 'garnish-like-a-pro', title:'Garnish Like a Pro', duration:'Watch Now · 3 min',
    img:'https://images.unsplash.com/photo-1504711434969-e33886168f5c?auto=format&fit=crop&w=1200&q=60' },
  { id: 'shaking-vs-stirring', title:'Shaking vs Stirring', duration:'Watch Now · 4 min',
    img:'https://images.unsplash.com/photo-1608589589264-e35c8c6bd0ba?auto=format&fit=crop&w=1200&q=60' },
];

// Removed renderActiveContent function - using individual screens again

export default function FeaturedScreen() {
  const nav = useNavigation<NativeStackNavigationProp<RootStackParamList>>();
  const [active, setActive] = React.useState<string>('Home');
  const { toggleSavedCocktail, isCocktailSaved } = useSavedItems();
  const scrollViewRef = useRef<ScrollView>(null);

  const handleSearch = (results: SearchableItem[]) => {
    // Handle search results - could navigate to search results screen
    console.log('Search results:', results);
  };

  const handleRecipeCreated = (recipeId: string) => {
    console.log('Recipe created:', recipeId);
    // Could navigate to the created recipe
  };

  const handleCompetitionEntryCreated = (entryId: string) => {
    console.log('Competition entry created:', entryId);
    // Could navigate to the entry or competitions section
  };
  const mainScrollRef = useRef<ScrollView>(null);

  // Ensure Home button is highlighted when screen comes into focus
  useFocusEffect(
    React.useCallback(() => {
      setActive('Home');
    }, [])
  );

  useLayoutEffect(() => {
    nav.setOptions({
      title: 'Featured',
      headerStyle: { backgroundColor: colors.bg },
      headerTintColor: colors.text,
      headerTitleStyle: { color: colors.text, fontWeight: '900' },
      headerShadowVisible: false,
      headerLeft: active === 'Home' ? undefined : () => (
        <Pressable hitSlop={12} onPress={() => nav.goBack()}>
          <Ionicons name="arrow-back" size={24} color={colors.text} />
        </Pressable>
      ),
      headerRight: () => (
        <View style={{ flexDirection: 'row', gap: 16 }}>
          <Pressable hitSlop={12} onPress={() => handleSearch([])}>
            <Ionicons name="search" size={24} color={colors.text} />
          </Pressable>
          <Pressable hitSlop={12} onPress={() => {}}>
            <Ionicons name="funnel" size={24} color={colors.text} />
          </Pressable>
          <Pressable hitSlop={12} onPress={() => handleRecipeCreated('new-recipe')}>
            <Ionicons name="add-circle" size={24} color={colors.accent} />
          </Pressable>
        </View>
      ),
    });
  }, [nav, active, handleSearch, handleRecipeCreated]);

  const goto = (key: string) => {
    if (key === 'Home') {
      // Stay on this screen, keep Home highlighted, and reset scroll position
      setActive('Home');
      scrollViewRef.current?.scrollTo({ x: 0, animated: true });
      mainScrollRef.current?.scrollTo({ y: 0, animated: true });
      return;
    }
    
    // Clear highlighting when navigating away
    setActive('');
    
    // Navigate to individual screens like before
    try {
      if (key === 'Spirits') {
        nav.navigate('Spirits' as never);
      } else if (key === 'Bars') {
        nav.navigate('Bars' as never);  
      } else if (key === 'Events') {
        nav.navigate('Events' as never);
      } else if (key === 'Games') {
        nav.navigate('Games' as never);
      } else if (key === 'Vault') {
        nav.navigate('Vault' as never);
      }
      // Non-Alcoholic stays on featured screen
    } catch (error) {
      // Silently handle navigation errors for non-existent screens
    }
  };


  return (
    <View style={{ flex: 1, backgroundColor: colors.bg }}>
      <ScrollView ref={mainScrollRef} style={styles.container} contentContainerStyle={{ paddingBottom: spacing(4) }}>
      {/* Chips - scrollable horizontal */}
      <ScrollView ref={scrollViewRef} horizontal showsHorizontalScrollIndicator={false} style={styles.chipsContainer} contentContainerStyle={styles.chipsRow}>
        {chips.map(c => {
          const isActive = active === c.key;
          return (
            <PillButton
              key={c.key}
              title={c.label}
              onPress={() => goto(c.key)}
              style={!isActive ? { backgroundColor: 'transparent', borderWidth: 1, borderColor: colors.line } : undefined}
              textStyle={!isActive ? { color: colors.text } : undefined}
            />
          )
        })}
      </ScrollView>


      {/* Featured Content - show all sections */}
      <Section title="Featured Spirit Picks" onPress={() => nav.navigate('Spirits' as never)}>
        <HScroll cards={goldSpirits} onPress={(item) => {
          // Use same navigation logic as Spirits page for gold tier spirits
          nav.navigate('FeaturedSpirit' as never, { spiritId: item.id, tier: item.tier });
        }} />
      </Section>

      <Section title="Featured Bar Picks" onPress={() => nav.navigate('Bars' as never)}>
        <HScroll cards={goldBars} smallGap onPress={(item) => {
          if (item.title === 'Untitled Champagne Lounge') {
            nav.navigate('UntitledLounge' as never);
          } else {
            nav.navigate('BarDetails' as never, {
              name: item.title,
              subtitle: item.subtitle,
              image: item.img
            });
          }
        }} />
      </Section>

      <Section title="Featured Cocktails">
        <ScrollView horizontal showsHorizontalScrollIndicator={false} contentContainerStyle={{ gap: spacing(2), paddingHorizontal: spacing(2) }}>
          {featuredCocktails.map(cocktail => (
            <TouchableOpacity 
              key={cocktail.id} 
              style={styles.cocktailCard} 
              onPress={() => nav.navigate('CocktailDetail', { cocktailId: cocktail.id })}
              activeOpacity={0.8}
            >
              <Image source={{ uri: cocktail.img }} style={styles.cocktailImage}/>
              <View style={styles.cocktailInfo}>
                <Text style={styles.cardTitle}>{cocktail.title}</Text>
                <Text style={styles.cardSub}>{cocktail.subtitle}</Text>
                <View style={styles.cocktailMeta}>
                  <Text style={styles.cocktailDifficulty}>{cocktail.difficulty}</Text>
                  <Text style={styles.cocktailTime}>{cocktail.time}</Text>
                </View>
              </View>
              <TouchableOpacity 
                style={styles.saveButton} 
                activeOpacity={0.7}
                onPress={() => toggleSavedCocktail({
                  id: cocktail.id,
                  name: cocktail.name,
                  subtitle: cocktail.description,
                  image: cocktail.image
                })}
              >
                <Ionicons 
                  name={isCocktailSaved(cocktail.id) ? "bookmark" : "bookmark-outline"} 
                  size={20} 
                  color={isCocktailSaved(cocktail.id) ? colors.accent : colors.text} 
                />
              </TouchableOpacity>
            </TouchableOpacity>
          ))}
        </ScrollView>
      </Section>



      <Section title="Next Upcoming Event">
        <View style={styles.eventFlyer}>
          <Image source={{ uri:'https://images.unsplash.com/photo-1574671928146-5c89a22b2e85?auto=format&fit=crop&w=1200&q=60' }}
                 style={styles.flyerImage}/>
          <View style={styles.flyerContent}>
            <Text style={styles.flyerTitle}>Mixology Master Class</Text>
            <Text style={styles.flyerSubtitle}>March 15, 2025 • 7:00 PM</Text>
            <Text style={styles.flyerDescription}>
              Join expert mixologists for hands-on training in premium cocktail techniques and presentation.
            </Text>
            <TouchableOpacity style={buttons.cta} onPress={() => nav.navigate('XPTransaction' as never)}>
              <Text style={buttons.ctaText}>Stake XP & Register</Text>
              <Ionicons name="chevron-forward" size={16} color={colors.white} style={{ marginLeft: 6 }} />
            </TouchableOpacity>
          </View>
        </View>
      </Section>

      <ToolPromo title="Premium Bar Tools"
                 subtitle="Equip your home bar with professional-grade tools."
                 cta="Shop Now"
                 onPress={()=>{}}/>

      <Section title="Bartending Hack Videos">
        <ScrollView horizontal showsHorizontalScrollIndicator={false} contentContainerStyle={{ gap: spacing(2), paddingHorizontal: spacing(2) }}>
          {videos.map(v=>(
            <View key={v.id} style={styles.videoCard}>
              <Image source={{ uri:v.img }} style={styles.videoImage}/>
              <Text style={styles.cardTitle}>{v.title}</Text>
              <Text style={styles.cardSub}>{v.duration}</Text>
            </View>
          ))}
        </ScrollView>
      </Section>

      <Section title="Bartender Spotlight">
        <View style={styles.profileRow}>
          <Image source={{ uri:'https://images.unsplash.com/illustration-female-avatar.png?auto=format&fit=crop&w=300&q=60' }}
                 style={styles.avatar}/>
          <View style={styles.profileInfo}>
            <Text style={styles.profileName}>Ava Sterling</Text>
            <Text style={styles.profileLine}>London, UK</Text>
            <Text style={styles.profileLine}>Favorite Bar: Untitled Champagne Lounge</Text>
            <Text style={styles.profileLine}>Location: Calgary, AB</Text>
            <Text style={styles.profileLine}>Signature Drink: The Mélange à trois</Text>
          </View>
        </View>
        <TouchableOpacity style={[styles.goldBtn,{ alignSelf:'center', marginTop:spacing(3)}]}>
          <Text style={styles.goldBtnText}>Follow</Text>
          <Ionicons name="chevron-forward" size={16} color={colors.text} style={{ marginLeft: 6 }} />
        </TouchableOpacity>
      </Section>
      </ScrollView>

    </View>
  );
}

function Section({ title, children, onPress }: { title:string; children:React.ReactNode; onPress?: () => void }) {
  return (
    <View style={styles.section}>
      {onPress ? (
        <TouchableOpacity onPress={onPress} activeOpacity={0.8}>
          <View style={{ flexDirection: 'row', alignItems: 'center' }}>
            <Text style={styles.sectionTitle}>{title}</Text>
            <Ionicons name="chevron-forward" size={20} color={colors.accent} style={{ marginLeft: 4 }} />
          </View>
        </TouchableOpacity>
      ) : (
        <Text style={styles.sectionTitle}>{title}</Text>
      )}
      <View style={{ marginTop: spacing(1) }}>{children}</View>
    </View>
  );
}

function HScroll({ cards, smallGap, onPress }:{ cards:Array<{title:string; subtitle?:string; img:string; id?:string; tier?:string}>; smallGap?:boolean; onPress?: (item: {title:string; subtitle?:string; img:string; id?:string; tier?:string}) => void }) {
  const { toggleSavedBar, isBarSaved } = useSavedItems();

  const handleShare = async (item: {title:string; subtitle?:string; img:string; id?:string; tier?:string}) => {
    try {
      await Share.share({
        message: `Check out ${item.title}! ${item.subtitle ? item.subtitle : 'A great bar to visit.'}`,
        title: `${item.title} - Bar Recommendation`,
      });
    } catch (error) {
      Alert.alert('Error', 'Unable to share at this time');
    }
  };

  return (
    <ScrollView horizontal showsHorizontalScrollIndicator={false}
      contentContainerStyle={{ gap: smallGap ? spacing(1.5) : spacing(2) }}>
      {cards.map(c=>(
        <TouchableOpacity key={c.id || c.title} style={styles.hCard} onPress={() => onPress?.(c)} activeOpacity={0.8}>
          <View style={styles.cardImageContainer}>
            <Image source={{ uri:c.img }} style={styles.hImage}/>
            <TouchableOpacity
              style={styles.cardShareButton}
              onPress={() => handleShare(c)}
              activeOpacity={0.7}
            >
              <Ionicons name="share-outline" size={16} color={colors.white} />
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.cardSaveButton}
              onPress={() => toggleSavedBar({
                id: c.id || c.title,
                name: c.title,
                subtitle: c.subtitle,
                image: c.img
              })}
              activeOpacity={0.7}
            >
              <Ionicons 
                name={isBarSaved(c.id || c.title) ? "bookmark" : "bookmark-outline"} 
                size={16} 
                color={isBarSaved(c.id || c.title) ? colors.accent : colors.white} 
              />
            </TouchableOpacity>
          </View>
          <Text style={styles.cardTitle}>{c.title}</Text>
          {c.subtitle ? <Text style={styles.cardSub}>{c.subtitle}</Text> : null}
        </TouchableOpacity>
      ))}
    </ScrollView>
  );
}

function ToolPromo({ title, subtitle, cta, onPress }:{
  title:string; subtitle:string; cta:string; onPress:()=>void;
}) {
  return (
    <View style={styles.toolCard}>
      <View style={{ flex:1 }}>
        <Text style={styles.cardTitle}>{title}</Text>
        <Text style={styles.cardSub}>{subtitle}</Text>
      </View>
      <TouchableOpacity onPress={onPress} style={styles.goldBtn}>
        <Text style={styles.goldBtnText}>{cta}</Text>
        <Ionicons name="chevron-forward" size={16} color={colors.text} style={{ marginLeft: 6 }} />
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container:{ flex:1, backgroundColor:colors.bg },

  // Scrollable chips container  
  chipsContainer: {
    paddingTop: spacing(2),
    paddingBottom: spacing(1),
  },
  chipsRow: {
    flexDirection: 'row',
    paddingHorizontal: spacing(2),
    gap: spacing(1),
  },

  section:{ paddingHorizontal:spacing(2), marginTop:spacing(2) },
  sectionTitle:{ color:colors.text, fontSize:fonts.h2, fontWeight:'800' },

  hCard:{ width:260 },
  cardImageContainer: {
    position: 'relative',
    marginBottom: spacing(1),
  },
  hImage:{ width:260, height:160, borderRadius:radii.md },
  cardShareButton: {
    position: 'absolute',
    top: spacing(1),
    right: spacing(4),
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
    alignItems: 'center',
    justifyContent: 'center',
  },
  cardSaveButton: {
    position: 'absolute',
    top: spacing(1),
    right: spacing(1),
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
    alignItems: 'center',
    justifyContent: 'center',
  },
  cardTitle:{ color:colors.text, fontWeight:'800', fontSize:fonts.h3 },
  cardSub:{ color:colors.muted, marginTop:2 },

  eventRow:{ flexDirection:'row', gap:spacing(2), alignItems:'center' },
  eventImage:{ width:120, height:90, borderRadius:radii.md },
  eventTitle:{ color:colors.text, fontWeight:'800', fontSize:fonts.h3 },
  eventSubtitle:{ color:colors.muted, marginTop:2 },

  grid2:{ flexDirection:'row', flexWrap:'wrap', gap:spacing(2) },
  gameCard:{ width:220 },
  gameImage:{ width:220, height:140, borderRadius:radii.lg, marginBottom:spacing(1) },

  videoCard:{ width:220 },
  videoImage:{ width:220, height:140, borderRadius:radii.lg, marginBottom:spacing(1) },

  masterImage:{ width:'100%', height:160, borderRadius:radii.lg },

  toolCard:{
    marginHorizontal:spacing(2), marginTop:spacing(2),
    backgroundColor:colors.card, borderRadius:radii.lg, padding:spacing(2),
    flexDirection:'row', alignItems:'center', gap:spacing(2),
    shadowColor:colors.shadow, shadowOpacity:0.25, shadowOffset:{ width:0, height:6 }, shadowRadius:10, elevation:3
  },

  // Learn More button spaced out more
  goldBtn:{ backgroundColor:colors.accent, paddingHorizontal:spacing(2), paddingVertical:spacing(1.5), borderRadius:radii.md, marginTop:spacing(1.5), flexDirection:'row', alignItems:'center', justifyContent:'center' },
  goldBtnText:{ color:colors.text, fontWeight:'800', fontSize:15 },

  // Event Flyer
  eventFlyer: {
    backgroundColor: colors.card,
    borderRadius: radii.lg,
    padding: spacing(2),
    marginHorizontal: spacing(2),
    shadowColor: colors.shadow,
    shadowOpacity: 0.25,
    shadowOffset: { width: 0, height: 6 },
    shadowRadius: 10,
    elevation: 3
  },
  flyerImage: {
    width: '100%',
    height: 160,
    borderRadius: radii.md,
    marginBottom: spacing(2)
  },
  flyerContent: {
    gap: spacing(1)
  },
  flyerTitle: {
    color: colors.text,
    fontSize: fonts.h2,
    fontWeight: '800'
  },
  flyerSubtitle: {
    color: colors.muted,
    fontSize: fonts.body,
    fontWeight: '600'
  },
  flyerDescription: {
    color: colors.muted,
    fontSize: fonts.body,
    lineHeight: 20,
    marginBottom: spacing(2)
  },

  // Profile Section
  profileRow: { 
    flexDirection: 'row', 
    gap: spacing(3), 
    alignItems: 'flex-start',
    paddingHorizontal: spacing(2)
  },
  avatar: { 
    width: 72, 
    height: 72, 
    borderRadius: 14 
  },
  profileInfo: {
    flex: 1,
    gap: spacing(0.5)
  },
  profileName: { 
    color: colors.text, 
    fontWeight: '800', 
    fontSize: fonts.h3, 
    marginBottom: spacing(0.5)
  },
  profileLine: { 
    color: colors.muted,
    fontSize: fonts.body,
    lineHeight: 20
  },

  // Cocktail Cards
  cocktailCard: {
    width: 280,
    backgroundColor: colors.card,
    borderRadius: radii.lg,
    borderWidth: 1,
    borderColor: colors.line,
    overflow: 'hidden',
    position: 'relative',
  },
  cocktailImage: {
    width: '100%',
    height: 160,
  },
  cocktailInfo: {
    padding: spacing(2),
  },
  cocktailMeta: {
    flexDirection: 'row',
    gap: spacing(2),
    marginTop: spacing(1),
  },
  cocktailDifficulty: {
    fontSize: 12,
    color: colors.accent,
    fontWeight: '600',
  },
  cocktailTime: {
    fontSize: 12,
    color: colors.subtext,
    fontWeight: '600',
  },
  saveButton: {
    position: 'absolute',
    top: spacing(1),
    right: spacing(1),
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: 'rgba(0,0,0,0.5)',
    alignItems: 'center',
    justifyContent: 'center',
  },

});